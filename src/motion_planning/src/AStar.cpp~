#pragma once
#include <algorithm>
#include <functional>
#include <vector>
#include <cmath>
#include <iostream>
#include <map>
#include <queue>
//#include <stdio>
#include <AStar.hpp>
//Checks if compiling on windows (mostly for testing) to include the header
#ifdef _WIN32 
#include <Windows.h>
#endif

using namespace std;

/*
Author: Andrew Petersen

Description: Simple AStar path planning implementation
using STL priority queue and hash maps. Also
provides functions to display grid data to standard
output (color functionality WINDOWS only).

Example Usage:
int main(){

//Creates the path planner
AStar pplan(data, width, height);

//Sets the starting point
pplan.setStart(38, 38);

//Sets the end point
pplan.setEnd(1, 1);

//Displays the data as a grid to standar output
pplan.displayData();

//Computes the path, stores it in a vector of Nodes
vector<AStar::Node> path = pplan.compute();

//Dislays the path
pplan.displayPath();

//NOTE:	The structure path now contains the list of points. Easy to iterate over
and store within a different data structure
}

Where:	"data" = 1d char array in row major format
"width" = width of the grid (# of cols)
"height" = height of the grid (# of rows)

*/


class AStar {

private:

	/*
	These can be changed based on the format of the grid data
	If the grid data just contain 0s and 1s, you could change it,
	for example, to INVALID_CHAR = 1; VALID_CHAR = 0
	*/

	const char INVALID_CHAR = 'X';
	const char VALID_CHAR = '-';
	const char PATH_CHAR = '*';

	const int NUM_DIRECTIONS = 4;
	const int drVals[8] = { 1,-1, 0, 0, 1, 1, -1, -1 };
	const int dcVals[8] = { 0, 0, 1, -1, 1, -1, 1, -1 };

#ifdef _WIN32
	HANDLE hConsole;
#endif

public:
	//Node class used for grid cells
	class Node {
	public:
		int row = 0, col = 0;
		double f = 0, g = 0, h = 0;
		Node* parent = NULL;
		double dx, dy;
		int id = -1;

		void setF(Node* goal) {
			dy = abs(goal->row - row);
			dx = abs(goal->col - col);
			//cross = abs(dx*dy2 - dx2*dy);

			h = dx + dy;
			f = g + h;
		}
		void setID(const int& width) {
			id = row*width + col;
		}
	};

private:

	Node* start;
	Node* end;
	int m_width, m_height;
	char* m_data;
	vector<Node> m_computedPath;

public:
	AStar(char* data, int width, int height);
	void setStart(int startRow, int startCol);
	void setEnd(int endRow, int endCol);

	//Computes the path
	vector<Node> compute();

	//Returns the last computed path
	vector<Node> getLastComputedPath();

	//Display functions for debugging and visualization
	void displayData();
	void displayPath();

};

using namespace std;

#define FILENAME "obsGrid.txt"

char* gridData;
int width, height;

//Loads tab delimited file
int readGrid(string filename) {
	ifstream ifs(filename);
	width = 0;
	height = 0;
	bool f1 = true, f2 = false;
	string line;
	int tempWidth = 0;

	while (!ifs.eof()) {
		std::getline(ifs, line);
		if (f1) {
			for (int i = 0; i < line.length(); i++) {
				if (line[i] == '\t')
					width++;

				tempWidth = width;
			}
			f1 = false;
		}
		else {
			tempWidth = 0;
	for (int i = 0; i < line.length(); i++) {
		if (line[i] == '\t')
			tempWidth++;
	}
		}

		if (tempWidth != width) {
			cout << "Invalid file, inconsistent number of columns per row" << endl;
			f2 = true;
			break;
		}
		height++;
	}
	if (f2)
		return -1;

	ifs.close();
	width++;

	//File verified and row/col counts found. Reading in data...
	ifs.open(filename);
	gridData = new char[width*height];

	int i = 0;
	while (!ifs.eof()) {
		ifs >> gridData[i];
		i++;
	}
	ifs.close();
	return 0;
}


int main(int argc, char* argv[]) {

	string fName;
	if (argc == 1) {
		cout << "No grid data specified" << endl;
	}
	else {
		fName = argv[1];
	}

	//Reads grid file
	readGrid(fName);

	//Sets up timing benchmark vars
	chrono::steady_clock::time_point begin, end;

	//Sets up the AStar path planner 
	AStar pplan(gridData, width, height);
	pplan.setStart(28, 28);
	pplan.setEnd(1, 1);
	pplan.displayData();

	vector<AStar::Node> path;

	begin = std::chrono::steady_clock::now();
	path = pplan.compute(); //computes A* path
	end = std::chrono::steady_clock::now();

	pplan.displayPath();

	//Note: Can use "pplan.getLastComputedPath()" to get the path
	//		without recomputing
	

	cout << "---=== Final Path Points ===---" << endl << endl;
	for (int i = path.size() - 1; i >= 0; i--) {
		if (i == path.size() - 1)
			cout << "Start:\trow=" << path[i].row << "\tcol=" << path[i].col << endl;
		else if (i == 0)
			cout << "Goal:\trow=" << path[i].row << "\tcol=" << path[i].col << endl;
		else
			cout << "     \trow=" << path[i].row << "\tcol=" << path[i].col << endl;
	}
	cout << endl << "Time to compute path = " << chrono::duration_cast<chrono::microseconds>(end - begin).count() << " microseconds" << endl;

	//asystem("PAUSE");
	return 0;
}

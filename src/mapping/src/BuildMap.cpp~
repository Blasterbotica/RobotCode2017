
#include <ros/ros.h>
#include <string>
#include <grid_map_ros/grid_map_ros.hpp>
#include <grid_map_msgs/GridMap.h>
#include <nav_msgs/OccupancyGrid.h>
#include <nav_msgs/MapMetaData.h>
#include <grid_map_ros/GridMapRosConverter.hpp>
#include <sensor_msgs/PointCloud2.h>
#include <nav_msgs/Path.h>
#include "mapping/ElevationMapping.hpp"
#include "grid_map_core/iterators/GridMapIterator.hpp"

#include <geometry_msgs/PoseStamped.h>

 ros::Publisher pubmap;
  
void GridMapCallback(const grid_map_msgs::GridMap& message){

grid_map::GridMap map;
float min = 0.0;
float max = 1.0;

grid_map::GridMapRosConverter::fromMessage(message, map);
//std::cout << map.at("elevation") << std::endl;
const std::string& layer = "elevation";
float value;
for (grid_map::GridMapIterator iterator(map); !iterator.isPastEnd(); ++iterator) {
  if(map.at(layer, *iterator) < 0.0){

    value = abs(map.at(layer,*iterator));
  }
  else{
    value = map.at(layer,*iterator);
  }

map.at(layer, *iterator) = value;

}

nav_msgs::OccupancyGrid occ; 
nav_msgs::MapMetaData datz;

grid_map::GridMapRosConverter::toOccupancyGrid(map,layer,min,max, occ);
datz = occ.info;

int occ_map[datz.height][datz.width];

for (int rows = 0; rows < datz.height; rows++){

	for(int cols = 0; cols < datz.width; cols++){
		
		int i = rows*datz.width;
    if( occ.data[i+cols] < 10){
      occ_map[rows][cols] = 0;
      occ.data[i+cols] = 0;
    }
    else{
    occ_map[rows][cols] = 100;
    occ.data[i+cols] = 100;
    }
	
	}
}

pubmap.publish(occ);
}


int main(int argc, char** argv)
{
  ros::init(argc, argv, "map_build_node");
  ROS_INFO("Starting BuildMap.cpp");
  ros::NodeHandle n;
  ros::Subscriber submap;
 
  pubmap = n.advertise<nav_msgs::OccupancyGrid>("Built_Map", 1,true);
submap = n.subscribe("/mapping/ele_map_raw",5,GridMapCallback);

  // Spin
  ros::spin();
  ros::waitForShutdown();
  return 0;
}
// }

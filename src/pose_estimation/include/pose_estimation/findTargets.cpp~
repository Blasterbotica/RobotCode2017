#include <opencv2/opencv.hpp>

// max distance between centroids
#define DPIXEL 3.0

// find all CCC targets on the image and return a vector (list) of their locations.
std::vector<cv::Point2d> findTargets(cv::Mat Image) {
	std::vector<cv::Point2d> targets;
	cv::Mat imageThresh;

	// use Otsu global thresholding
	// image, output thresholded image, threshold value, output value
	cv::threshold(Image, imageThresh, 0, 255, cv::THRESH_OTSU | cv::THRESH_BINARY_INV);

	// threshold_type ‐ invert
	//// Do adaptive threshold ... this compares each pixel to a local
	//// mean of the neighborhood.  The result is a binary image, where
	//// dark areas of the original image are now white (1's).

	// imputimage, ouput threshold image, output value where condition met, local neighborhood, threshold type, ...
	// block size (any large number), a constant to subtract from the mean
	// adaptiveThreshold(Image, imageThresh, 255, cv::ADAPTIVE_THRESH_GAUSSIAN_C, cv::THRESH_BINARY_INV, 91, 0); 

	// apply morphological operations to get rid of small (noise) regions.
	cv::Mat structuringElmt = cv::getStructuringElement(cv::MORPH_ELLIPSE, cv::Size(3, 3));
	cv::Mat imageOpen;
	morphologyEx(imageThresh, imageOpen, cv::MORPH_OPEN, structuringElmt);
	cv::Mat imageClose;
	morphologyEx(imageOpen, imageClose, cv::MORPH_CLOSE, structuringElmt);

	// now find contours.
	std::vector<std::vector<cv::Point>> contours;
	std::vector<cv::Vec4i> hierarchy;

	// input image is destroyed, output vector of contours, hierarchical representation, retrieve all contours all pixels of each contour
	cv::findContours(imageClose, contours, hierarchy, cv::RETR_CCOMP, cv::CHAIN_APPROX_NONE);

	// analyze components and find CCCs
	for (unsigned int i1 = 0; i1 < (int)contours.size(); i1++) {
		int i2 = hierarchy[i1][2];
		if (i2 < 0) continue;

		// compute centroids of inner and outer regions
		cv::Moments mu1 = cv::moments(contours[i1]);
		cv::Point2d x1(mu1.m10 / mu1.m00, mu1.m01 / mu1.m00);
		cv::Moments mu2 = cv::moments(contours[i2]);
		cv::Point2d x2(mu2.m10 / mu2.m00, mu2.m01 / mu2.m00);

		// check if centroids coincide
		if (norm(x1 - x2) > DPIXEL) continue;

		// check the "circularity" ratio of the outer region, which is
		// the ratio of area to perimeter squared:  R = 4*pi*A/P^2.
		// R is 1 for a circle, and pi/4 for a square.
		double P1 = arcLength(contours[i1], true);
		double A1 = contourArea(contours[i1]);
		if (4 * 3.1415*A1 / (P1*P1) < 3.1415 / 4)

			// let's say that we want our region to be at least as round as a square.
			continue;

		// this must be a valid target; add it to the output list.
		targets.push_back(x1);
	}

	return targets;
}
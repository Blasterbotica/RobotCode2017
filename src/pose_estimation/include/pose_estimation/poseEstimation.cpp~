#include <iostream>
#include <opencv2/opencv.hpp>

// function prototypes
std::vector<cv::Point2d> findTargets(cv::Mat Image);
std::vector<cv::Point2d> orderTargets(std::vector<cv::Point2d> allTargets);

int main(int argc, char* argv[]) {
	
	// open the camera or use a pre-recorded video
	//cv::VideoCapture cap(0);
	cv::VideoCapture cap("fiveCCC.avi");
	
	// ensure success
	if (!cap.isOpened()) {
		printf("error ‐ can't open the camera\n");
		system("PAUSE");
		return EXIT_FAILURE;
	}

	printf("Hit ESC key to quit ...\n");

	// create 3D object model points, in the order
	//	0	1	2
	//	3		4
	std::vector<cv::Point3d> pointsModel;
	pointsModel.push_back(cv::Point3d(-3.7, -2.275, 0));
	pointsModel.push_back(cv::Point3d(0, -2.275, 0));
	pointsModel.push_back(cv::Point3d(3.7, -2.275, 0));
	pointsModel.push_back(cv::Point3d(-3.7, 2.275, 0));
	pointsModel.push_back(cv::Point3d(3.7, 2.275, 0));
	
	// camera intrinsic matrix
	double K_[3][3] =
	{ { 675, 0, 320 },
	{ 0, 675, 240 },
	{ 0, 0, 1 } };
	cv::Mat K = cv::Mat(3, 3, CV_64F, K_).clone();
	cv::Mat dist = cv::Mat::zeros(5, 1, CV_64F); // distortion coeffs
	
	// loop until no more images are available, or person hits "ESC" key.
	while(true) {
		
		// get image from camera or video file
		cv::Mat imageInput;
		cap >> imageInput;
		
		if(imageInput.empty()) break;
		
		// convert to gray
		cv::Mat imageInputGray;
		cvtColor(imageInput, imageInputGray, cv::COLOR_BGR2GRAY);
		
		// find all CCC targets
		std::vector<cv::Point2d> allTargets;
		allTargets = findTargets(imageInputGray);
		
		// draw dots on all targets found
		for (unsigned int i = 0; i < allTargets.size(); i++) {
			// input image, circle center, circle radius, color, thickness (negative = filled)
			cv::circle(imageInput, allTargets[i], 3, cv::Scalar(0, 0, 255), -1);
		}

		// find the 5‐CCC target pattern, and put the targets in the order
		//	1	2	3
		//	4		5
		std::vector<cv::Point2d> orderedTargets;
		orderedTargets = orderTargets(allTargets);

		// optionally label targets in the image
		for (unsigned int i = 0; i < orderedTargets.size(); i++) {
			
			char szLabel[50];
			sprintf_s(szLabel, "%d", i);
			
			// input image, char array, array of Point2d, font face, font scale, font color, thickness
			putText(imageInput, szLabel, cv::Point2d(orderedTargets[i]), cv::FONT_HERSHEY_PLAIN, 2.0, cv::Scalar(0, 255, 0), 2);
		}

		if (orderedTargets.size() == 5) {
			// Calculate the pose.
			cv::Mat rotVec, transVec;

			// model points, image points, intrinsic camera parameter matrix, distortion coefficients, output rotation and translation
			bool foundPose = cv::solvePnP(pointsModel, allTargets, K, dist, rotVec, transVec);
			if (foundPose) {
				std::vector<cv::Point3d> pointsAxes;
				std::vector<cv::Point2d> pointsImage;
				
				// draw the xyz coordinate axes on the image.
				pointsAxes.push_back(cv::Point3d(0, 0, 0)); // origin
				pointsAxes.push_back(cv::Point3d(1, 0, 0)); // x axis
				pointsAxes.push_back(cv::Point3d(0, 1, 0)); // y axis
				pointsAxes.push_back(cv::Point3d(0, 0, 1)); // z axis
				cv::projectPoints(pointsAxes, rotVec, transVec, K, dist, pointsImage);
				line(imageInput, pointsImage[0], pointsImage[1], cv::Scalar(0, 0, 255), 2);
				line(imageInput, pointsImage[0], pointsImage[2], cv::Scalar(0, 255, 0), 2);
				line(imageInput, pointsImage[0], pointsImage[3], cv::Scalar(255, 0, 0), 2);
			}
		}
		
		// show the image on the screen
		imshow("Image", imageInput);
		
		// wait for xxx ms (0 means wait until a keypress)
		// ESC key will quit
		if (cv::waitKey(1) == 27) break;
	}

	return EXIT_SUCCESS;
}